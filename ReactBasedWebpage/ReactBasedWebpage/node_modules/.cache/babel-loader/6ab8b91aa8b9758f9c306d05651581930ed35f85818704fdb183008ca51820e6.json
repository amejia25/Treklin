{"ast":null,"code":"//importGPXTab.js\n//This file contains code for the area in WebsiteBackbone.js when the user hits \"Import GPX\"\n//It also cotains the code to import a gpx file.\n//Coder: Jan Baraniecki\n// Event Listener for Import GPX Button from the Main Menu\nconst importLink = document.querySelector('li a[href=\"#import\"]');\nimportLink.addEventListener('click', function (e) {\n  e.preventDefault(); // Prevent the default behavior of the link\n  // Get the current IP address from the browser's location\n  //GLOBAL VARIABLES\n  const port = 4000; // Port to connect to Nodejs\n\n  //Variablees to construct WebUrl for Nodejs- To upload GPX Files\n  const currentLocation = window.location;\n  const ipAddress = currentLocation.hostname; // Extract the IP address\n  // Construct the dynamic URL for the server endpoint with port 4000\n  const serverURL = `http://${ipAddress}:${port}/upload`;\n\n  //console.log(\"Import GPX File link clicked\");\n  // Update the content in the center area with the \"Import GPX File\" section content.\n  const contentDiv = document.getElementById('background');\n\n  //Generate HTML code that goes in the background container when \"Import Gpx File\" from MainMenu is Clicked.\n  contentDiv.innerHTML = `\n        <h1>Import GPX File</h1>\n        <p>This is the Import GPX File section content.</p>\n        <button id=\"importGPXButton\" class=\"button\">Process GPX</button>\n        <div id=\"uploadStatus\"></div>\n\n    `;\n\n  // Event listener for the Process GPX button in the background container.\n  const importGPXButton = document.getElementById(\"importGPXButton\");\n  importGPXButton.addEventListener(\"click\", function () {\n    // Clear error Screen\n    document.getElementById('uploadStatus').innerHTML = '';\n\n    // Trigger file input click to select GPX file\n    const fileInput = document.getElementById('fileInput');\n    fileInput.click();\n\n    // Add change event listener to the file input\n    fileInput.addEventListener('change', function (event) {\n      const file = event.target.files[0];\n      if (file) {\n        // Create FormData and append the file\n        const formData = new FormData();\n        formData.append('gpxFile', file);\n\n        // Send the file to the server\n        fetch(serverURL, {\n          method: 'POST',\n          body: formData\n        }).then(response => {\n          if (response.ok) {\n            return response.text(); // Assuming the server sends a text response\n          } else {\n            // If server response is not OK, throw an error\n            console.log(response.text());\n            throw new Error('Upload failed');\n          }\n        }).then(data => {\n          // Update UI with success message\n          document.getElementById('uploadStatus').innerHTML = `<p style=\"color: green;\">Success: ${data}</p>`;\n        }).catch(error => {\n          // Update UI with error message\n          document.getElementById('uploadStatus').innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\n        });\n      }\n    }, {\n      once: true\n    }); // This ensures the event listener is added only once\n  });\n});","map":{"version":3,"names":["importLink","document","querySelector","addEventListener","e","preventDefault","port","currentLocation","window","location","ipAddress","hostname","serverURL","contentDiv","getElementById","innerHTML","importGPXButton","fileInput","click","event","file","target","files","formData","FormData","append","fetch","method","body","then","response","ok","text","console","log","Error","data","catch","error","message","once"],"sources":["C:/Users/jan_p/OneDrive/Desktop/Ser 401/Sprint 7/US177/Conversion/cycleapp/src/tabs/importGPXTab.js"],"sourcesContent":["//importGPXTab.js\r\n//This file contains code for the area in WebsiteBackbone.js when the user hits \"Import GPX\"\r\n//It also cotains the code to import a gpx file.\r\n//Coder: Jan Baraniecki\r\n// Event Listener for Import GPX Button from the Main Menu\r\nconst importLink = document.querySelector('li a[href=\"#import\"]');\r\nimportLink.addEventListener('click', function(e) {\r\n    \r\n    e.preventDefault(); // Prevent the default behavior of the link\r\n    // Get the current IP address from the browser's location\r\n    //GLOBAL VARIABLES\r\n    const port = 4000; // Port to connect to Nodejs\r\n    \r\n    //Variablees to construct WebUrl for Nodejs- To upload GPX Files\r\n    const currentLocation = window.location;\r\n    const ipAddress = currentLocation.hostname; // Extract the IP address\r\n    // Construct the dynamic URL for the server endpoint with port 4000\r\n    const serverURL = `http://${ipAddress}:${port}/upload`;\r\n    \r\n    \r\n    //console.log(\"Import GPX File link clicked\");\r\n    // Update the content in the center area with the \"Import GPX File\" section content.\r\n    const contentDiv = document.getElementById('background');\r\n    \r\n    //Generate HTML code that goes in the background container when \"Import Gpx File\" from MainMenu is Clicked.\r\n    contentDiv.innerHTML = `\r\n        <h1>Import GPX File</h1>\r\n        <p>This is the Import GPX File section content.</p>\r\n        <button id=\"importGPXButton\" class=\"button\">Process GPX</button>\r\n        <div id=\"uploadStatus\"></div>\r\n\r\n    `;\r\n\r\n    // Event listener for the Process GPX button in the background container.\r\n    const importGPXButton = document.getElementById(\"importGPXButton\");\r\n    importGPXButton.addEventListener(\"click\", function() {\r\n        // Clear error Screen\r\n        document.getElementById('uploadStatus').innerHTML = '';\r\n        \r\n        // Trigger file input click to select GPX file\r\n        const fileInput = document.getElementById('fileInput');\r\n        fileInput.click();\r\n\r\n        // Add change event listener to the file input\r\n        fileInput.addEventListener('change', function(event) {\r\n            const file = event.target.files[0];\r\n            if (file) {\r\n                // Create FormData and append the file\r\n                const formData = new FormData();\r\n                formData.append('gpxFile', file);\r\n\r\n                // Send the file to the server\r\n                fetch(serverURL, {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                })\r\n                .then(response => {\r\n                    if(response.ok) {\r\n                        return response.text(); // Assuming the server sends a text response\r\n                    } else {\r\n                        // If server response is not OK, throw an error\r\n                        console.log(response.text());\r\n                        throw new Error('Upload failed');\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    // Update UI with success message\r\n                    document.getElementById('uploadStatus').innerHTML = `<p style=\"color: green;\">Success: ${data}</p>`;\r\n                })\r\n                .catch(error => {\r\n                    // Update UI with error message\r\n                    document.getElementById('uploadStatus').innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\r\n                });\r\n            }\r\n        }, { once: true }); // This ensures the event listener is added only once\r\n    });\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;AACjEF,UAAU,CAACG,gBAAgB,CAAC,OAAO,EAAE,UAASC,CAAC,EAAE;EAE7CA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB;EACA;EACA,MAAMC,IAAI,GAAG,IAAI,CAAC,CAAC;;EAEnB;EACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,QAAQ;EACvC,MAAMC,SAAS,GAAGH,eAAe,CAACI,QAAQ,CAAC,CAAC;EAC5C;EACA,MAAMC,SAAS,GAAI,UAASF,SAAU,IAAGJ,IAAK,SAAQ;;EAGtD;EACA;EACA,MAAMO,UAAU,GAAGZ,QAAQ,CAACa,cAAc,CAAC,YAAY,CAAC;;EAExD;EACAD,UAAU,CAACE,SAAS,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;;EAED;EACA,MAAMC,eAAe,GAAGf,QAAQ,CAACa,cAAc,CAAC,iBAAiB,CAAC;EAClEE,eAAe,CAACb,gBAAgB,CAAC,OAAO,EAAE,YAAW;IACjD;IACAF,QAAQ,CAACa,cAAc,CAAC,cAAc,CAAC,CAACC,SAAS,GAAG,EAAE;;IAEtD;IACA,MAAME,SAAS,GAAGhB,QAAQ,CAACa,cAAc,CAAC,WAAW,CAAC;IACtDG,SAAS,CAACC,KAAK,CAAC,CAAC;;IAEjB;IACAD,SAAS,CAACd,gBAAgB,CAAC,QAAQ,EAAE,UAASgB,KAAK,EAAE;MACjD,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACN;QACA,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEL,IAAI,CAAC;;QAEhC;QACAM,KAAK,CAACd,SAAS,EAAE;UACbe,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEL;QACV,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAI;UACd,IAAGA,QAAQ,CAACC,EAAE,EAAE;YACZ,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5B,CAAC,MAAM;YACH;YACAC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAIG,KAAK,CAAC,eAAe,CAAC;UACpC;QACJ,CAAC,CAAC,CACDN,IAAI,CAACO,IAAI,IAAI;UACV;UACAnC,QAAQ,CAACa,cAAc,CAAC,cAAc,CAAC,CAACC,SAAS,GAAI,qCAAoCqB,IAAK,MAAK;QACvG,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZ;UACArC,QAAQ,CAACa,cAAc,CAAC,cAAc,CAAC,CAACC,SAAS,GAAI,iCAAgCuB,KAAK,CAACC,OAAQ,MAAK;QAC5G,CAAC,CAAC;MACN;IACJ,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;AACN,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}