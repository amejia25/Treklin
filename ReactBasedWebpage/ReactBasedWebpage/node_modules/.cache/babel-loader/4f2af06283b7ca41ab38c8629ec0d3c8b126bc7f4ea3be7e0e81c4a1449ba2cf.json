{"ast":null,"code":"// GoogleMapAPI.js\n// Loads the Google Map onto the webpage.\n//Coder: Jan Baraniecki\nfunction initMap() {\n  var map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 8,\n    center: {\n      lat: 37.7749,\n      lng: -122.4194\n    } // Default center coordinates (San Francisco)\n  });\n\n  // Replace 'YOUR_API_KEY' with your actual Google Maps API key\n  var apiKey = 'AIzaSyBgL-iJwE2T1Jm8oUDpVArKUIpGuvPUSI0';\n\n  // Load the GPX file and parse it\n  loadGPXFileIntoGoogleMap(map, './public/sample.gpx', apiKey);\n}\nfunction loadGPXFileIntoGoogleMap(map, filename, apiKey) {\n  // Load GPX file using the parser\n  loadFile(filename, function (gpxData) {\n    parseGPX(gpxData, function (data) {\n      var bounds = new google.maps.LatLngBounds();\n      var path = [];\n\n      // Create a polyline from the GPX data\n      data.forEach(function (track) {\n        track.points.forEach(function (point) {\n          var latlng = new google.maps.LatLng(point.lat, point.lon);\n          path.push(latlng);\n          bounds.extend(latlng);\n        });\n      });\n\n      // Create the map\n      map.fitBounds(bounds);\n      var route = new google.maps.Polyline({\n        path: path,\n        geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      });\n\n      // Set the map for the polyline\n      route.setMap(map);\n    });\n  });\n}\nfunction loadFile(filename, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4 && xhr.status == 200) {\n      callback(xhr.responseText);\n    }\n  };\n  xhr.open(\"GET\", filename, true);\n  xhr.send();\n}","map":{"version":3,"names":["initMap","map","google","maps","Map","document","getElementById","zoom","center","lat","lng","apiKey","loadGPXFileIntoGoogleMap","filename","loadFile","gpxData","parseGPX","data","bounds","LatLngBounds","path","forEach","track","points","point","latlng","LatLng","lon","push","extend","fitBounds","route","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","setMap","callback","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send"],"sources":["C:/Users/jan_p/OneDrive/Desktop/Ser 401/Sprint 7/US177/Conversion/cycleapp/src/GoogleMapAPI.js"],"sourcesContent":["// GoogleMapAPI.js\r\n// Loads the Google Map onto the webpage.\r\n//Coder: Jan Baraniecki\r\nfunction initMap() {\r\n    var map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 8,\r\n        center: { lat: 37.7749, lng: -122.4194 } // Default center coordinates (San Francisco)\r\n    });\r\n\r\n    // Replace 'YOUR_API_KEY' with your actual Google Maps API key\r\n    var apiKey = 'AIzaSyBgL-iJwE2T1Jm8oUDpVArKUIpGuvPUSI0';\r\n\r\n    // Load the GPX file and parse it\r\n    loadGPXFileIntoGoogleMap(map, './public/sample.gpx', apiKey);\r\n}\r\n\r\nfunction loadGPXFileIntoGoogleMap(map, filename, apiKey) {\r\n    // Load GPX file using the parser\r\n    loadFile(filename, function (gpxData) {\r\n        parseGPX(gpxData, function (data) {\r\n            var bounds = new google.maps.LatLngBounds();\r\n            var path = [];\r\n\r\n            // Create a polyline from the GPX data\r\n            data.forEach(function (track) {\r\n                track.points.forEach(function (point) {\r\n                    var latlng = new google.maps.LatLng(point.lat, point.lon);\r\n                    path.push(latlng);\r\n                    bounds.extend(latlng);\r\n                });\r\n            });\r\n\r\n            // Create the map\r\n            map.fitBounds(bounds);\r\n            var route = new google.maps.Polyline({\r\n                path: path,\r\n                geodesic: true,\r\n                strokeColor: '#FF0000',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 2\r\n            });\r\n\r\n            // Set the map for the polyline\r\n            route.setMap(map);\r\n        });\r\n    });\r\n}\r\n\r\nfunction loadFile(filename, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState == 4 && xhr.status == 200) {\r\n            callback(xhr.responseText);\r\n        }\r\n    };\r\n    xhr.open(\"GET\", filename, true);\r\n    xhr.send();\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAOA,CAAA,EAAG;EACf,IAAIC,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAE;IAC1DC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE;MAAEC,GAAG,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;IAAS,CAAC,CAAC;EAC7C,CAAC,CAAC;;EAEF;EACA,IAAIC,MAAM,GAAG,yCAAyC;;EAEtD;EACAC,wBAAwB,CAACX,GAAG,EAAE,qBAAqB,EAAEU,MAAM,CAAC;AAChE;AAEA,SAASC,wBAAwBA,CAACX,GAAG,EAAEY,QAAQ,EAAEF,MAAM,EAAE;EACrD;EACAG,QAAQ,CAACD,QAAQ,EAAE,UAAUE,OAAO,EAAE;IAClCC,QAAQ,CAACD,OAAO,EAAE,UAAUE,IAAI,EAAE;MAC9B,IAAIC,MAAM,GAAG,IAAIhB,MAAM,CAACC,IAAI,CAACgB,YAAY,CAAC,CAAC;MAC3C,IAAIC,IAAI,GAAG,EAAE;;MAEb;MACAH,IAAI,CAACI,OAAO,CAAC,UAAUC,KAAK,EAAE;QAC1BA,KAAK,CAACC,MAAM,CAACF,OAAO,CAAC,UAAUG,KAAK,EAAE;UAClC,IAAIC,MAAM,GAAG,IAAIvB,MAAM,CAACC,IAAI,CAACuB,MAAM,CAACF,KAAK,CAACf,GAAG,EAAEe,KAAK,CAACG,GAAG,CAAC;UACzDP,IAAI,CAACQ,IAAI,CAACH,MAAM,CAAC;UACjBP,MAAM,CAACW,MAAM,CAACJ,MAAM,CAAC;QACzB,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACAxB,GAAG,CAAC6B,SAAS,CAACZ,MAAM,CAAC;MACrB,IAAIa,KAAK,GAAG,IAAI7B,MAAM,CAACC,IAAI,CAAC6B,QAAQ,CAAC;QACjCZ,IAAI,EAAEA,IAAI;QACVa,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE,SAAS;QACtBC,aAAa,EAAE,GAAG;QAClBC,YAAY,EAAE;MAClB,CAAC,CAAC;;MAEF;MACAL,KAAK,CAACM,MAAM,CAACpC,GAAG,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEA,SAASa,QAAQA,CAACD,QAAQ,EAAEyB,QAAQ,EAAE;EAClC,IAAIC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;EAC9BD,GAAG,CAACE,kBAAkB,GAAG,YAAY;IACjC,IAAIF,GAAG,CAACG,UAAU,IAAI,CAAC,IAAIH,GAAG,CAACI,MAAM,IAAI,GAAG,EAAE;MAC1CL,QAAQ,CAACC,GAAG,CAACK,YAAY,CAAC;IAC9B;EACJ,CAAC;EACDL,GAAG,CAACM,IAAI,CAAC,KAAK,EAAEhC,QAAQ,EAAE,IAAI,CAAC;EAC/B0B,GAAG,CAACO,IAAI,CAAC,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}