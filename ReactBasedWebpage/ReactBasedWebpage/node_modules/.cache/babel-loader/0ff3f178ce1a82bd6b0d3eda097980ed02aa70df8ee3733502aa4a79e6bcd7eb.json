{"ast":null,"code":"// Export GPX Button Listener\nconst exportLink = document.querySelector('li a[href=\"#export\"]');\nexportLink.addEventListener('click', async function (e) {\n  e.preventDefault();\n\n  // GLOBAL VARIABLES\n  const port = 4000; // Port to connect to Nodejs\n\n  // Variables to construct Web URL for Nodejs - To download GPX Files\n  const currentLocation = window.location;\n  const ipAddress = currentLocation.hostname; // Extract the IP address\n  // Construct the dynamic URL for the server endpoint with port 4000\n  const serverURL = `http://${ipAddress}:${port}`;\n  const contentDiv = document.getElementById('background');\n  try {\n    // Fetch the list of files from nodejs\n    const response = await fetch(`${serverURL}/files`);\n    const files = await response.json();\n\n    // Generate HTML for file list\n    let fileListHtml = '<h1>Export GPX File</h1><div style=\"overflow-y: scroll; height: 200px;\">';\n    files.forEach(file => {\n      fileListHtml += `<div><a href=\"${serverURL}/uploads/${file}\" download>${file}</a></div>`;\n    });\n    fileListHtml += '</div>';\n    contentDiv.innerHTML = fileListHtml;\n  } catch (error) {\n    console.error('Error fetching files:', error);\n    contentDiv.innerHTML = '<p>Error loading files. Please try again later.</p>';\n  }\n});","map":{"version":3,"names":["exportLink","document","querySelector","addEventListener","e","preventDefault","port","currentLocation","window","location","ipAddress","hostname","serverURL","contentDiv","getElementById","response","fetch","files","json","fileListHtml","forEach","file","innerHTML","error","console"],"sources":["C:/Users/jan_p/OneDrive/Desktop/Ser 401/Sprint 7/US177/Conversion/cycleapp/src/tabs/exportGPXTab.js"],"sourcesContent":["// Export GPX Button Listener\nconst exportLink = document.querySelector('li a[href=\"#export\"]');\nexportLink.addEventListener('click', async function(e) {\n    e.preventDefault();\n    \n    // GLOBAL VARIABLES\n    const port = 4000; // Port to connect to Nodejs\n    \n    // Variables to construct Web URL for Nodejs - To download GPX Files\n    const currentLocation = window.location;\n    const ipAddress = currentLocation.hostname; // Extract the IP address\n    // Construct the dynamic URL for the server endpoint with port 4000\n    const serverURL = `http://${ipAddress}:${port}`;\n    \n    const contentDiv = document.getElementById('background');\n    \n    try {\n        // Fetch the list of files from nodejs\n        const response = await fetch(`${serverURL}/files`);\n        const files = await response.json();\n\n        // Generate HTML for file list\n        let fileListHtml = '<h1>Export GPX File</h1><div style=\"overflow-y: scroll; height: 200px;\">';\n        files.forEach(file => {\n            fileListHtml += `<div><a href=\"${serverURL}/uploads/${file}\" download>${file}</a></div>`;\n        });\n        fileListHtml += '</div>';\n\n        contentDiv.innerHTML = fileListHtml;\n    } catch (error) {\n        console.error('Error fetching files:', error);\n        contentDiv.innerHTML = '<p>Error loading files. Please try again later.</p>';\n    }\n});"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;AACjEF,UAAU,CAACG,gBAAgB,CAAC,OAAO,EAAE,gBAAeC,CAAC,EAAE;EACnDA,CAAC,CAACC,cAAc,CAAC,CAAC;;EAElB;EACA,MAAMC,IAAI,GAAG,IAAI,CAAC,CAAC;;EAEnB;EACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,QAAQ;EACvC,MAAMC,SAAS,GAAGH,eAAe,CAACI,QAAQ,CAAC,CAAC;EAC5C;EACA,MAAMC,SAAS,GAAI,UAASF,SAAU,IAAGJ,IAAK,EAAC;EAE/C,MAAMO,UAAU,GAAGZ,QAAQ,CAACa,cAAc,CAAC,YAAY,CAAC;EAExD,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,SAAU,QAAO,CAAC;IAClD,MAAMK,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAEnC;IACA,IAAIC,YAAY,GAAG,0EAA0E;IAC7FF,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MAClBF,YAAY,IAAK,iBAAgBP,SAAU,YAAWS,IAAK,cAAaA,IAAK,YAAW;IAC5F,CAAC,CAAC;IACFF,YAAY,IAAI,QAAQ;IAExBN,UAAU,CAACS,SAAS,GAAGH,YAAY;EACvC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CV,UAAU,CAACS,SAAS,GAAG,qDAAqD;EAChF;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}