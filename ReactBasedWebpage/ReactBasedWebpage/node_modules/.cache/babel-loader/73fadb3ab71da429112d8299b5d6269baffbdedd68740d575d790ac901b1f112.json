{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jan_p\\\\OneDrive\\\\Desktop\\\\Ser 401\\\\Sprint 8\\\\US192\\\\ReactBasedWebpage\\\\cycleapp\\\\src\\\\Scripts\\\\gpxParser.js\",\n  _s = $RefreshSig$();\n// gpxParser.js\n// A basic gpx parser to get started in reading gpx files returning data that can go into google maps.\n//Coder: Jan Baraniecki\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GPXParserComponent = () => {\n  _s();\n  const [tracks, setTracks] = useState([]);\n  const parseGPX = gpxData => {\n    var parser = new DOMParser();\n    var xmlDoc = parser.parseFromString(gpxData, \"text/xml\");\n    var tracks = [];\n    var trkElements = xmlDoc.getElementsByTagName(\"trk\");\n    for (var i = 0; i < trkElements.length; i++) {\n      var track = {\n        points: []\n      };\n      var trksegElements = trkElements[i].getElementsByTagName(\"trkseg\");\n      for (var j = 0; j < trksegElements.length; j++) {\n        var trkptElements = trksegElements[j].getElementsByTagName(\"trkpt\");\n        for (var k = 0; k < trkptElements.length; k++) {\n          var lat = parseFloat(trkptElements[k].getAttribute(\"lat\"));\n          var lon = parseFloat(trkptElements[k].getAttribute(\"lon\"));\n          var point = {\n            lat: lat,\n            lon: lon\n          };\n          track.points.push(point);\n        }\n      }\n      tracks.push(track);\n    }\n    return tracks;\n  };\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const gpxData = e.target.result;\n        const parsedTracks = parseGPX(gpxData);\n        setTracks(parsedTracks);\n      };\n      reader.readAsText(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tracks.map((track, index) => /*#__PURE__*/_jsxDEV(\"div\", {}, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(GPXParserComponent, \"L1pLig/GVCA9Hd5Koxqlpeo2zIY=\");\n_c = GPXParserComponent;\nexport default GPXParserComponent;\nvar _c;\n$RefreshReg$(_c, \"GPXParserComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GPXParserComponent","_s","tracks","setTracks","parseGPX","gpxData","parser","DOMParser","xmlDoc","parseFromString","trkElements","getElementsByTagName","i","length","track","points","trksegElements","j","trkptElements","k","lat","parseFloat","getAttribute","lon","point","push","handleFileChange","event","file","target","files","reader","FileReader","onload","e","result","parsedTracks","readAsText","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Users/jan_p/OneDrive/Desktop/Ser 401/Sprint 8/US192/ReactBasedWebpage/cycleapp/src/Scripts/gpxParser.js"],"sourcesContent":["// gpxParser.js\r\n// A basic gpx parser to get started in reading gpx files returning data that can go into google maps.\r\n//Coder: Jan Baraniecki\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst GPXParserComponent = () => {\r\n    const [tracks, setTracks] = useState([]);\r\n\r\n    const parseGPX = (gpxData) => {\r\n        var parser = new DOMParser();\r\n        var xmlDoc = parser.parseFromString(gpxData, \"text/xml\");\r\n\r\n        var tracks = [];\r\n\r\n        var trkElements = xmlDoc.getElementsByTagName(\"trk\");\r\n        for (var i = 0; i < trkElements.length; i++) {\r\n            var track = { points: [] };\r\n\r\n            var trksegElements = trkElements[i].getElementsByTagName(\"trkseg\");\r\n            for (var j = 0; j < trksegElements.length; j++) {\r\n                var trkptElements = trksegElements[j].getElementsByTagName(\"trkpt\");\r\n                for (var k = 0; k < trkptElements.length; k++) {\r\n                    var lat = parseFloat(trkptElements[k].getAttribute(\"lat\"));\r\n                    var lon = parseFloat(trkptElements[k].getAttribute(\"lon\"));\r\n                    var point = { lat: lat, lon: lon };\r\n                    track.points.push(point);\r\n                }\r\n            }\r\n\r\n            tracks.push(track);\r\n        }\r\n\r\n        return tracks;\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                const gpxData = e.target.result;\r\n                const parsedTracks = parseGPX(gpxData);\r\n                setTracks(parsedTracks);\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" onChange={handleFileChange} />\r\n            {/* Display tracks data or render them on a map */}\r\n            <div>\r\n                {tracks.map((track, index) => (\r\n                    <div key={index}>\r\n                        {/* Render track data */}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GPXParserComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}