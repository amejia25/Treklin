{"ast":null,"code":"//imagesTab.js\n//This file contains code for the area in index.html when the user hits \"Images\"\n//It also cotains the code to import an jpeg file.\n//Coder: Jan Baraniecki\n\n// Event Listener for Import Image Button from the Main Menu\nconst imageLink = document.querySelector('li a[href=\"#images\"]');\nimageLink.addEventListener('click', function (e) {\n  e.preventDefault(); // Prevent the default behavior of the link\n  // Get the current IP address from the browser's location\n  //GLOBAL VARIABLES\n  const port = 4000; // Port to connect to Nodejs\n\n  //Variablees to construct WebUrl for Nodejs- To upload image Files\n  const currentLocation = window.location;\n  const ipAddress = currentLocation.hostname; // Extract the IP address\n  // Construct the dynamic URL for the server endpoint with port 4000\n  const serverURL = `http://${ipAddress}:${port}/uploadImage`;\n\n  //console.log(\"Import GPX File link clicked\");\n  // Update the content in the center area with the \"Import GPX File\" section content.\n  const contentDiv = document.getElementById('background');\n\n  //Generate HTML code that goes in the background container when \"Import Gpx File\" from MainMenu is Clicked.\n  contentDiv.innerHTML = `\n        <h1>Import Image File</h1>\n        <p>This is the Image section content.</p>\n        <input type=\"file\" id=\"fileImageInput\" accept=\"image/jpeg\" style=\"display: none;\">\n        <button id=\"importImageButton\" class=\"button\">Process Image</button>\n        <div id=\"uploadImageStatus\"></div>\n    `;\n\n  // Remove old event listeners from fileImageInput and attach new ones\n  const oldFileImageInput = document.getElementById('fileImageInput');\n  const newFileImageInput = oldFileImageInput.cloneNode(true);\n  oldFileImageInput.parentNode.replaceChild(newFileImageInput, oldFileImageInput);\n  newFileImageInput.addEventListener('change', function (event) {\n    const file = event.target.files[0];\n    if (file) {\n      // Create FormData and append the file\n      const formData = new FormData();\n      formData.append('jpegFile', file);\n\n      // Send the file to the server\n      fetch(serverURL, {\n        method: 'POST',\n        body: formData\n      }).then(response => {\n        if (response.ok) {\n          return response.json(); // Assuming the server sends back JSON data with the image URL\n        } else {\n          throw new Error('Upload failed');\n        }\n      }).then(data => {\n        // Update UI with success message\n        const uploadStatusDiv = document.getElementById('uploadImageStatus');\n        uploadStatusDiv.innerHTML = '';\n        uploadStatusDiv.innerHTML = `<p style=\"color: green;\">Success: File uploaded successfully.</p>`;\n\n        // Display the uploaded image\n        if (data.imageUrl) {\n          const img = document.createElement('img');\n          img.src = data.imageUrl; // URL from the server response\n          img.alt = 'Uploaded Image';\n          uploadStatusDiv.appendChild(img);\n        }\n      }).catch(error => {\n        // Update UI with error message\n        document.getElementById('uploadImageStatus').innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\n      });\n    }\n  });\n\n  // Event listener for the Process Image button\n  // Remove old event listeners from importImageButton and attach new ones\n  const oldImportImageButton = document.getElementById(\"importImageButton\");\n  const newImportImageButton = oldImportImageButton.cloneNode(true);\n  oldImportImageButton.parentNode.replaceChild(newImportImageButton, oldImportImageButton);\n  newImportImageButton.addEventListener(\"click\", function () {\n    // Clear error screen\n    document.getElementById('uploadImageStatus').innerHTML = '';\n    // Trigger file input click to select an image file\n    newFileImageInput.click();\n  });\n});","map":{"version":3,"names":["imageLink","document","querySelector","addEventListener","e","preventDefault","port","currentLocation","window","location","ipAddress","hostname","serverURL","contentDiv","getElementById","innerHTML","oldFileImageInput","newFileImageInput","cloneNode","parentNode","replaceChild","event","file","target","files","formData","FormData","append","fetch","method","body","then","response","ok","json","Error","data","uploadStatusDiv","imageUrl","img","createElement","src","alt","appendChild","catch","error","message","oldImportImageButton","newImportImageButton","click"],"sources":["C:/Users/jan_p/OneDrive/Desktop/Ser 401/Sprint 7/US177/Conversion/cycleapp/src/tabs/imagesTab.js"],"sourcesContent":["//imagesTab.js\r\n//This file contains code for the area in index.html when the user hits \"Images\"\r\n//It also cotains the code to import an jpeg file.\r\n//Coder: Jan Baraniecki\r\n\r\n// Event Listener for Import Image Button from the Main Menu\r\nconst imageLink = document.querySelector('li a[href=\"#images\"]');\r\nimageLink.addEventListener('click', function(e) {\r\n    e.preventDefault(); // Prevent the default behavior of the link\r\n    // Get the current IP address from the browser's location\r\n    //GLOBAL VARIABLES\r\n    const port = 4000; // Port to connect to Nodejs\r\n    \r\n    //Variablees to construct WebUrl for Nodejs- To upload image Files\r\n    const currentLocation = window.location;\r\n    const ipAddress = currentLocation.hostname; // Extract the IP address\r\n    // Construct the dynamic URL for the server endpoint with port 4000\r\n    const serverURL = `http://${ipAddress}:${port}/uploadImage`;\r\n    \r\n    \r\n    //console.log(\"Import GPX File link clicked\");\r\n    // Update the content in the center area with the \"Import GPX File\" section content.\r\n    const contentDiv = document.getElementById('background');\r\n    \r\n    //Generate HTML code that goes in the background container when \"Import Gpx File\" from MainMenu is Clicked.\r\n        contentDiv.innerHTML = `\r\n        <h1>Import Image File</h1>\r\n        <p>This is the Image section content.</p>\r\n        <input type=\"file\" id=\"fileImageInput\" accept=\"image/jpeg\" style=\"display: none;\">\r\n        <button id=\"importImageButton\" class=\"button\">Process Image</button>\r\n        <div id=\"uploadImageStatus\"></div>\r\n    `;\r\n    \r\n    // Remove old event listeners from fileImageInput and attach new ones\r\n    const oldFileImageInput = document.getElementById('fileImageInput');\r\n    const newFileImageInput = oldFileImageInput.cloneNode(true);\r\n    oldFileImageInput.parentNode.replaceChild(newFileImageInput, oldFileImageInput);\r\n    \r\n    newFileImageInput.addEventListener('change', function(event) {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            // Create FormData and append the file\r\n            const formData = new FormData();\r\n            formData.append('jpegFile', file);\r\n\r\n            // Send the file to the server\r\n           fetch(serverURL, {\r\n                method: 'POST',\r\n                body: formData,\r\n            })\r\n            .then(response => {\r\n                if(response.ok) {\r\n                    return response.json(); // Assuming the server sends back JSON data with the image URL\r\n                } else {\r\n                    throw new Error('Upload failed');\r\n                }\r\n            })\r\n            .then(data => {\r\n                // Update UI with success message\r\n                const uploadStatusDiv = document.getElementById('uploadImageStatus');\r\n                uploadStatusDiv.innerHTML = '';\r\n                uploadStatusDiv.innerHTML = `<p style=\"color: green;\">Success: File uploaded successfully.</p>`;\r\n\r\n                // Display the uploaded image\r\n                if (data.imageUrl) {\r\n                    const img = document.createElement('img');\r\n                    img.src = data.imageUrl; // URL from the server response\r\n                    img.alt = 'Uploaded Image';\r\n                    uploadStatusDiv.appendChild(img);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // Update UI with error message\r\n                document.getElementById('uploadImageStatus').innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\r\n            });\r\n          \r\n        }\r\n    }); \r\n\r\n    // Event listener for the Process Image button\r\n    // Remove old event listeners from importImageButton and attach new ones\r\n    const oldImportImageButton = document.getElementById(\"importImageButton\");\r\n    const newImportImageButton = oldImportImageButton.cloneNode(true);\r\n    oldImportImageButton.parentNode.replaceChild(newImportImageButton, oldImportImageButton);\r\n        newImportImageButton.addEventListener(\"click\", function() {\r\n            // Clear error screen\r\n            document.getElementById('uploadImageStatus').innerHTML = '';\r\n            // Trigger file input click to select an image file\r\n           newFileImageInput.click();\r\n    });\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}